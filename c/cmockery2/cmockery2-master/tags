!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
-sourcedir	packages/deb/rules	/^	dh_install --sourcedir=debian\/tmp$/;"	m
../src/example/database.h	doc/index.html	/^<a name="..\/src\/example\/database.h" href="database.h">database.h<\/a>$/;"	a
ARRAY_LENGTH	src/cmockery.c	67;"	d	file:
AUTOMAKE_ARGS	packages/FreeBSD/Makefile	/^AUTOMAKE_ARGS=	--add-missing$/;"	m
Assert_Macros	doc/index.html	/^<h3><a name="Assert_Macros">Assert Macros<\/a><\/h3>$/;"	a
Assertions	doc/index.html	/^<a name="Assertions"><h2>Assertions<\/h2><\/a>$/;"	a
BinaryOperator	src/example/calculator.c	/^typedef int (*BinaryOperator)(int a, int b);$/;"	t	file:
BinaryOperator	src/example/calculator_test.c	/^typedef int (*BinaryOperator)(int a, int b);$/;"	t	file:
CATEGORIES	packages/FreeBSD/Makefile	/^CATEGORIES=	sysutils$/;"	m
CC_COMMAND	windows/makefile	/^CC_COMMAND=$(CC) \/nologo \/c \/D_WIN32_WINNT=0x501 \/DHAVE_MALLOC_H \\$/;"	m
CC_COMMAND	windows/makefile	/^CC_COMMAND=$(CC_COMMAND) \/DUNIT_TESTING_DEBUG=1 \/Zi \/Od$/;"	m
CC_COMMAND_UNIT_TEST	windows/makefile	/^CC_COMMAND_UNIT_TEST=$(CC_COMMAND) \/DUNIT_TESTING=1 \\$/;"	m
CFLAGS	packages/deb/rules	/^CFLAGS = -Wall -g$/;"	m
CMOCKERY_H_	src/cmockery/cmockery.h	17;"	d
CMOCKERY_OVERRIDE_H_	src/cmockery/cmockery_override.h	30;"	d
CMOCKERY_PBC_H_	src/cmockery/pbc.h	31;"	d
COMMENT	packages/FreeBSD/Makefile	/^COMMENT=	Cmockery2 revival of Cmockery unit test framework from Google$/;"	m
CheckIntegerRange	src/cmockery.c	/^typedef struct CheckIntegerRange {$/;"	s	file:
CheckIntegerRange	src/cmockery.c	/^} CheckIntegerRange;$/;"	t	typeref:struct:CheckIntegerRange	file:
CheckIntegerSet	src/cmockery.c	/^typedef struct CheckIntegerSet {$/;"	s	file:
CheckIntegerSet	src/cmockery.c	/^} CheckIntegerSet;$/;"	t	typeref:struct:CheckIntegerSet	file:
CheckMemoryData	src/cmockery.c	/^typedef struct CheckMemoryData {$/;"	s	file:
CheckMemoryData	src/cmockery.c	/^} CheckMemoryData;$/;"	t	typeref:struct:CheckMemoryData	file:
CheckParameterEvent	src/cmockery/cmockery.h	/^typedef struct CheckParameterEvent {$/;"	s
CheckParameterEvent	src/cmockery/cmockery.h	/^} CheckParameterEvent;$/;"	t	typeref:struct:CheckParameterEvent
CheckParameterValue	src/cmockery/cmockery.h	/^typedef int (*CheckParameterValue)(const uintmax_t value,$/;"	t
Checking_Parameters	doc/index.html	/^<a name="Checking_Parameters"><h3>Checking Parameters<\/h3><\/a>$/;"	a
CleanupListValue	src/cmockery.c	/^typedef void (*CleanupListValue)(const void *value, void *cleanup_value_data);$/;"	t	file:
DEB_BUILD_GNU_TYPE	packages/deb/rules	/^DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)$/;"	m
DEB_HOST_GNU_TYPE	packages/deb/rules	/^DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)$/;"	m
DISTNAME	packages/FreeBSD/Makefile	/^DISTNAME=	v1.3.9$/;"	m
DatabaseConnection	src/example/database.h	/^struct DatabaseConnection {$/;"	s
DatabaseConnection	src/example/database.h	/^typedef struct DatabaseConnection DatabaseConnection;$/;"	t	typeref:struct:DatabaseConnection
Dynamic_Memory_Allocation	doc/index.html	/^<a name="Dynamic_Memory_Allocation"><h2>Dynamic Memory Allocation<\/h2><\/a>$/;"	a
ENSURE	src/cmockery/pbc.h	45;"	d
ENSURE	src/cmockery/pbc.h	58;"	d
EXAMPLE_SOURCE_DIRECTORY	windows/makefile	/^EXAMPLE_SOURCE_DIRECTORY=..\\src\\example$/;"	m
EXCEPTION_CODE_INFO	src/cmockery.c	290;"	d	file:
EXECUTABLE_DIR	windows/makefile	/^EXECUTABLE_DIR=.$/;"	m
EXTRACT_SUFX	packages/FreeBSD/Makefile	/^EXTRACT_SUFX=$/;"	m
EqualityFunction	src/cmockery.c	/^typedef int (*EqualityFunction)(const void *left, const void *right);$/;"	t	file:
Example	doc/index.html	/^<a name="Example"><h2>Example<\/h2><\/a>$/;"	a
ExceptionCodeInfo	src/cmockery.c	/^typedef struct ExceptionCodeInfo {$/;"	s	file:
ExceptionCodeInfo	src/cmockery.c	/^} ExceptionCodeInfo;$/;"	t	typeref:struct:ExceptionCodeInfo	file:
Exception_Handling	doc/index.html	/^<a name="Exception_Handling"><h2>Exception Handling<\/h2><\/a>$/;"	a
Failure_Conditions	doc/index.html	/^<a name="Failure_Conditions"><h2>Failure Conditions<\/h2><\/a>$/;"	a
GNU_CONFIGURE	packages/FreeBSD/Makefile	/^GNU_CONFIGURE=	yes$/;"	m
INSTALL_TARGET	packages/FreeBSD/Makefile	/^INSTALL_TARGET=	install-strip$/;"	m
INVARIANT	src/cmockery/pbc.h	53;"	d
INVARIANT	src/cmockery/pbc.h	59;"	d
KeyValue	src/example/key_value.h	/^typedef struct KeyValue {$/;"	s
KeyValue	src/example/key_value.h	/^} KeyValue;$/;"	t	typeref:struct:KeyValue
LFLAGS	windows/makefile	/^LFLAGS=$(LFLAGS) \/DEBUG$/;"	m
LIBLINKFLAGS	windows/makefile	/^LIBLINKFLAGS=\/NOLOGO$/;"	m
LIBRARY_DIR	windows/makefile	/^LIBRARY_DIR=.$/;"	m
LIBRARY_SOURCE_DIRECTORY	windows/makefile	/^LIBRARY_SOURCE_DIRECTORY=..\\src$/;"	m
LIBTOOL	windows/makefile	/^LIBTOOL=lib.exe$/;"	m
LIB_COMMAND	windows/makefile	/^LIB_COMMAND=$(LIBTOOL) $(LIBLINKFLAGS) $(LIBFLAGS) $(**) \/OUT:$(@)$/;"	m
LICENSE	packages/FreeBSD/Makefile	/^LICENSE=	APACHE20$/;"	m
LINK	windows/makefile	/^LINK=link.exe$/;"	m
LINK_COMMAND	windows/makefile	/^LINK_COMMAND=$(LINK) $(LIBLINKFLAGS) \/SUBSYSTEM:console \\$/;"	m
ListNode	src/cmockery.c	/^typedef struct ListNode {$/;"	s	file:
ListNode	src/cmockery.c	/^} ListNode;$/;"	t	typeref:struct:ListNode	file:
MAINTAINER	packages/FreeBSD/Makefile	/^MAINTAINER=	harsha@harshavardhana.net$/;"	m
MALLOC_ALIGNMENT	src/cmockery.c	61;"	d	file:
MALLOC_ALLOC_PATTERN	src/cmockery.c	58;"	d	file:
MALLOC_FREE_PATTERN	src/cmockery.c	59;"	d	file:
MALLOC_GUARD_PATTERN	src/cmockery.c	56;"	d	file:
MALLOC_GUARD_SIZE	src/cmockery.c	54;"	d	file:
MASTER_SITES	packages/FreeBSD/Makefile	/^MASTER_SITES=	https:\/\/codeload.github.com\/lpabon\/cmockery2\/tar.gz\/$/;"	m
MallocBlockInfo	src/cmockery.c	/^typedef struct MallocBlockInfo {$/;"	s	file:
MallocBlockInfo	src/cmockery.c	/^} MallocBlockInfo;$/;"	t	typeref:struct:MallocBlockInfo	file:
Mock_Functions	doc/index.html	/^<a name="Mock_Functions"><h2>Mock Functions<\/h2><\/a>$/;"	a
Motivation	doc/index.html	/^<a name="Motivation"><h2>Motivation<\/h2><\/a>$/;"	a
OBJECT_DIR	windows/makefile	/^OBJECT_DIR=.$/;"	m
OperatorFunction	src/example/calculator.c	/^typedef struct OperatorFunction {$/;"	s	file:
OperatorFunction	src/example/calculator.c	/^} OperatorFunction;$/;"	t	typeref:struct:OperatorFunction	file:
OperatorFunction	src/example/calculator_test.c	/^typedef struct OperatorFunction {$/;"	s	file:
OperatorFunction	src/example/calculator_test.c	/^} OperatorFunction;$/;"	t	typeref:struct:OperatorFunction	file:
Overview	doc/index.html	/^<a name="Overview"><h2>Overview<\/h2><\/a>$/;"	a
PORTNAME	packages/FreeBSD/Makefile	/^PORTNAME=	cmockery2$/;"	m
PORTVERSION	packages/FreeBSD/Makefile	/^PORTVERSION=	1.3.9$/;"	m
PRIXMAX	src/cmockery/cmockery.h	71;"	d
PRIXMAX	src/cmockery/cmockery.h	92;"	d
PRIdMAX	src/cmockery/cmockery.h	56;"	d
PRIdMAX	src/cmockery/cmockery.h	77;"	d
PRIiMAX	src/cmockery/cmockery.h	59;"	d
PRIiMAX	src/cmockery/cmockery.h	80;"	d
PRIoMAX	src/cmockery/cmockery.h	62;"	d
PRIoMAX	src/cmockery/cmockery.h	83;"	d
PRIuMAX	src/cmockery/cmockery.h	65;"	d
PRIuMAX	src/cmockery/cmockery.h	86;"	d
PRIxMAX	src/cmockery/cmockery.h	68;"	d
PRIxMAX	src/cmockery/cmockery.h	89;"	d
QueryDatabase	src/example/database.h	/^typedef unsigned int (*QueryDatabase)($/;"	t
REQUIRE	src/cmockery/pbc.h	40;"	d
REQUIRE	src/cmockery/pbc.h	57;"	d
Return_Values	doc/index.html	/^<a name="Return_Values"><h3>Return Values<\/h3><\/a>$/;"	a
SOURCE_LOCATION_FORMAT	src/cmockery.c	64;"	d	file:
SignalFunction	src/cmockery.c	/^typedef void (*SignalFunction)(int signal);$/;"	t	file:
SourceLocation	src/cmockery/cmockery.h	/^typedef struct SourceLocation {$/;"	s
SourceLocation	src/cmockery/cmockery.h	/^} SourceLocation;$/;"	t	typeref:struct:SourceLocation
SymbolMapValue	src/cmockery.c	/^typedef struct SymbolMapValue {$/;"	s	file:
SymbolMapValue	src/cmockery.c	/^} SymbolMapValue;$/;"	t	typeref:struct:SymbolMapValue	file:
SymbolValue	src/cmockery.c	/^typedef struct SymbolValue {$/;"	s	file:
SymbolValue	src/cmockery.c	/^} SymbolValue;$/;"	t	typeref:struct:SymbolValue	file:
TestState	src/cmockery.c	/^typedef struct TestState {$/;"	s	file:
TestState	src/cmockery.c	/^} TestState;$/;"	t	typeref:struct:TestState	file:
Test_Execution	doc/index.html	/^<a name="Test_Execution"><h2>Test Execution<\/h2><\/a>$/;"	a
Test_State	doc/index.html	/^<a name="Test_State"><h2>Test State<\/h2><\/a>$/;"	a
UNIT_TEST_FUNCTION_TYPE_SETUP	src/cmockery/cmockery.h	/^    UNIT_TEST_FUNCTION_TYPE_SETUP,$/;"	e	enum:UnitTestFunctionType
UNIT_TEST_FUNCTION_TYPE_TEARDOWN	src/cmockery/cmockery.h	/^    UNIT_TEST_FUNCTION_TYPE_TEARDOWN,$/;"	e	enum:UnitTestFunctionType
UNIT_TEST_FUNCTION_TYPE_TEST	src/cmockery/cmockery.h	/^    UNIT_TEST_FUNCTION_TYPE_TEST = 0,$/;"	e	enum:UnitTestFunctionType
UNIT_TEST_FUNCTION_TYPE_TEST_EXPECT_FAILURE	src/cmockery/cmockery.h	/^    UNIT_TEST_FUNCTION_TYPE_TEST_EXPECT_FAILURE,$/;"	e	enum:UnitTestFunctionType
USES	packages/FreeBSD/Makefile	/^USES=		libtool:build pkgconfig$/;"	m
USE_AUTOTOOLS	packages/FreeBSD/Makefile	/^USE_AUTOTOOLS=	automake autoconf aclocal libtoolize autoheader$/;"	m
USE_LDCONFIG	packages/FreeBSD/Makefile	/^USE_LDCONFIG=	yes$/;"	m
UnitTest	src/cmockery/cmockery.h	/^typedef struct UnitTest {$/;"	s
UnitTest	src/cmockery/cmockery.h	/^} UnitTest;$/;"	t	typeref:struct:UnitTest
UnitTestFunction	src/cmockery/cmockery.h	/^typedef void (*UnitTestFunction)(void **state);$/;"	t
UnitTestFunctionType	src/cmockery/cmockery.h	/^typedef enum UnitTestFunctionType {$/;"	g
UnitTestFunctionType	src/cmockery/cmockery.h	/^} UnitTestFunctionType;$/;"	t	typeref:enum:UnitTestFunctionType
ValuePointer	src/cmockery.c	/^typedef union ValuePointer {$/;"	u	file:
ValuePointer	src/cmockery.c	/^} ValuePointer;$/;"	t	typeref:union:ValuePointer	file:
WRKSRC	packages/FreeBSD/Makefile	/^WRKSRC=		${WRKDIR}\/cmockery2-${PORTVERSION}$/;"	m
XUNIT_TESTCASE_MSG_SIZE	src/cmockery.c	52;"	d	file:
XunitTestCase	src/cmockery.c	/^} XunitTestCase;$/;"	t	typeref:struct:__anon1	file:
XunitTestSuite	src/cmockery.c	/^} XunitTestSuite;$/;"	t	typeref:struct:__anon2	file:
_UINTPTR_T	src/cmockery/cmockery.h	103;"	d
__func__	src/cmockery/cmockery.h	49;"	d
_assert_in_range	src/cmockery.c	/^void _assert_in_range($/;"	f
_assert_in_set	src/cmockery.c	/^void _assert_in_set(const uintmax_t value,$/;"	f
_assert_int_equal	src/cmockery.c	/^void _assert_int_equal($/;"	f
_assert_int_not_equal	src/cmockery.c	/^void _assert_int_not_equal($/;"	f
_assert_memory_equal	src/cmockery.c	/^void _assert_memory_equal(const void * const a, const void * const b,$/;"	f
_assert_memory_not_equal	src/cmockery.c	/^void _assert_memory_not_equal(const void * const a, const void * const b,$/;"	f
_assert_not_in_range	src/cmockery.c	/^void _assert_not_in_range($/;"	f
_assert_not_in_set	src/cmockery.c	/^void _assert_not_in_set(const uintmax_t value,$/;"	f
_assert_string_equal	src/cmockery.c	/^void _assert_string_equal(const char * const a, const char * const b,$/;"	f
_assert_string_not_equal	src/cmockery.c	/^void _assert_string_not_equal(const char * const a, const char * const b,$/;"	f
_assert_true	src/cmockery.c	/^void _assert_true(const uintmax_t result,$/;"	f
_check_expected	src/cmockery.c	/^void _check_expected($/;"	f
_expect_any	src/cmockery.c	/^void _expect_any($/;"	f
_expect_check	src/cmockery.c	/^void _expect_check($/;"	f
_expect_in_range	src/cmockery.c	/^void _expect_in_range($/;"	f
_expect_in_set	src/cmockery.c	/^void _expect_in_set($/;"	f
_expect_memory	src/cmockery.c	/^void _expect_memory($/;"	f
_expect_not_in_range	src/cmockery.c	/^void _expect_not_in_range($/;"	f
_expect_not_in_set	src/cmockery.c	/^void _expect_not_in_set($/;"	f
_expect_not_memory	src/cmockery.c	/^void _expect_not_memory($/;"	f
_expect_not_string	src/cmockery.c	/^void _expect_not_string($/;"	f
_expect_not_value	src/cmockery.c	/^void _expect_not_value($/;"	f
_expect_string	src/cmockery.c	/^void _expect_string($/;"	f
_expect_value	src/cmockery.c	/^void _expect_value($/;"	f
_fail	src/cmockery.c	/^void _fail(const char * const file, const int line) {$/;"	f
_mock	src/cmockery.c	/^uintmax_t _mock(const char * const function, const char* const file,$/;"	f
_run_test	src/cmockery.c	/^int _run_test($/;"	f
_run_tests	src/cmockery.c	/^int _run_tests(const UnitTest * const tests,$/;"	f
_test_calloc	src/cmockery.c	/^void* _test_calloc(const size_t number_of_elements, const size_t size,$/;"	f
_test_free	src/cmockery.c	/^void _test_free(void* const ptr, const char* file, const int line) {$/;"	f
_test_malloc	src/cmockery.c	/^void* _test_malloc(const size_t size, const char* file, const int line) {$/;"	f
_test_realloc	src/cmockery.c	/^_test_realloc(void* ptr, $/;"	f
_will_return	src/cmockery.c	/^void _will_return(const char * const function_name, const char * const file,$/;"	f
add	src/example/calculator.c	/^static int add(int a, int b) {$/;"	f	file:
add_symbol_value	src/cmockery.c	/^static void add_symbol_value(ListNode * const symbol_map_head,$/;"	f	file:
allocated_size	src/cmockery.c	/^    size_t allocated_size;    \/\/ Total size of the allocated block.$/;"	m	struct:MallocBlockInfo	file:
array_length	src/example/calculator_test.c	28;"	d	file:
assert	src/cmockery/cmockery_override.h	50;"	d
assert	src/cmockery/cmockery_override.h	66;"	d
assert_false	src/cmockery/cmockery.h	247;"	d
assert_in_range	src/cmockery/cmockery.h	298;"	d
assert_in_set	src/cmockery/cmockery.h	312;"	d
assert_int_equal	src/cmockery/cmockery.h	269;"	d
assert_int_not_equal	src/cmockery/cmockery.h	274;"	d
assert_memory_equal	src/cmockery/cmockery.h	289;"	d
assert_memory_not_equal	src/cmockery/cmockery.h	293;"	d
assert_non_null	src/cmockery/cmockery.h	251;"	d
assert_not_in_range	src/cmockery/cmockery.h	305;"	d
assert_not_in_set	src/cmockery/cmockery.h	315;"	d
assert_null	src/cmockery/cmockery.h	254;"	d
assert_ptr_equal	src/cmockery/cmockery.h	258;"	d
assert_ptr_not_equal	src/cmockery/cmockery.h	263;"	d
assert_string_equal	src/cmockery/cmockery.h	280;"	d
assert_string_not_equal	src/cmockery/cmockery.h	284;"	d
assert_true	src/cmockery/cmockery.h	244;"	d
binary_operator	src/example/calculator_test.c	/^static int binary_operator(int a, int b) {$/;"	f	file:
block	src/cmockery.c	/^    void* block;              \/\/ Address of the block returned by malloc().$/;"	m	struct:MallocBlockInfo	file:
buffer_overflow	src/example/allocate_module.c	/^void buffer_overflow(void) {$/;"	f
buffer_overflow_test	src/example/allocate_module_test.c	/^static void buffer_overflow_test(void **state) {$/;"	f	file:
buffer_underflow	src/example/allocate_module.c	/^void buffer_underflow(void) {$/;"	f
buffer_underflow_test	src/example/allocate_module_test.c	/^static void buffer_underflow_test(void **state) {$/;"	f	file:
c	src/example/mem_test.c	/^    char c;$/;"	m	struct:__anon3	file:
calloc	src/cmockery/cmockery_override.h	58;"	d
calloc	src/cmockery/cmockery_override.h	75;"	d
cast_largest_integral_type_to_pointer	src/cmockery.c	83;"	d	file:
cast_ptr_to_largest_integral_type	src/cmockery/cmockery.h	116;"	d
cast_to_largest_integral_type	src/cmockery/cmockery.h	98;"	d
cast_to_pointer_integral_type	src/cmockery/cmockery.h	112;"	d
check_any	src/cmockery.c	/^static int check_any(const uintmax_t value,$/;"	f	file:
check_expected	src/cmockery/cmockery.h	239;"	d
check_for_leftover_values	src/cmockery.c	/^static int check_for_leftover_values($/;"	f	file:
check_in_range	src/cmockery.c	/^static int check_in_range(const uintmax_t value,$/;"	f	file:
check_in_set	src/cmockery.c	/^static int check_in_set(const uintmax_t value,$/;"	f	file:
check_memory	src/cmockery.c	/^static int check_memory(const uintmax_t value,$/;"	f	file:
check_not_in_range	src/cmockery.c	/^static int check_not_in_range(const uintmax_t value,$/;"	f	file:
check_not_in_set	src/cmockery.c	/^static int check_not_in_set(const uintmax_t value,$/;"	f	file:
check_not_memory	src/cmockery.c	/^static int check_not_memory(const uintmax_t value,$/;"	f	file:
check_not_string	src/cmockery.c	/^static int check_not_string(const uintmax_t value,$/;"	f	file:
check_not_value	src/cmockery.c	/^static int check_not_value(const uintmax_t value,$/;"	f	file:
check_point	src/cmockery.c	/^    const ListNode *check_point; \/\/ Check point of the test if there's a$/;"	m	struct:TestState	file:
check_point_allocated_blocks	src/cmockery.c	/^static const ListNode* check_point_allocated_blocks() {$/;"	f	file:
check_string	src/cmockery.c	/^static int check_string(const uintmax_t value,$/;"	f	file:
check_value	src/cmockery.c	/^static int check_value(const uintmax_t value,$/;"	f	file:
check_value	src/cmockery/cmockery.h	/^    CheckParameterValue check_value;$/;"	m	struct:CheckParameterEvent
check_value_data	src/cmockery/cmockery.h	/^    uintmax_t check_value_data;$/;"	m	struct:CheckParameterEvent
cleanup	makerpm.sh	/^cleanup()$/;"	f
code	src/cmockery.c	/^    DWORD code;$/;"	m	struct:ExceptionCodeInfo	file:
connect_to_customer_database	src/example/customer_database.c	/^DatabaseConnection* connect_to_customer_database(void) {$/;"	f
connect_to_database	src/example/customer_database_test.c	/^DatabaseConnection* connect_to_database(const char * const database_url,$/;"	f
connect_to_database	src/example/product_database_test.c	/^DatabaseConnection* connect_to_database(const char * const url,$/;"	f
connect_to_product_database	src/example/product_database.c	/^DatabaseConnection* connect_to_product_database(void) {$/;"	f
create_dir	makerpm.sh	/^create_dir()$/;"	f
create_key_values	src/example/key_value_test.c	/^static void create_key_values(void **state) {$/;"	f	file:
create_rpm	makerpm.sh	/^create_rpm()$/;"	f
create_src	makerpm.sh	/^create_src()$/;"	f
declare_initialize_value_pointer_pointer	src/cmockery.c	71;"	d	file:
declare_initialize_value_pointer_value	src/cmockery.c	78;"	d	file:
decrement_value	src/example/assert_module.c	/^void decrement_value(int * const value) {$/;"	f
decrement_value_fail	src/example/assert_module_test.c	/^void decrement_value_fail(void **state) {$/;"	f
default_signal_functions	src/cmockery.c	/^static SignalFunction default_signal_functions[$/;"	v	file:
description	src/cmockery.c	/^    const char* description;$/;"	m	struct:ExceptionCodeInfo	file:
destroy_key_values	src/example/key_value_test.c	/^static void destroy_key_values(void **state) {$/;"	f	file:
display_allocated_blocks	src/cmockery.c	/^static int display_allocated_blocks(const ListNode * const check_point) {$/;"	f	file:
divide	src/example/calculator.c	/^static int divide(int a, int b) {$/;"	f	file:
errors	src/cmockery.c	/^    int errors;$/;"	m	struct:__anon2	file:
event	src/cmockery.c	/^    CheckParameterEvent event;$/;"	m	struct:CheckIntegerRange	file:
event	src/cmockery.c	/^    CheckParameterEvent event;$/;"	m	struct:CheckIntegerSet	file:
event	src/cmockery.c	/^    CheckParameterEvent event;$/;"	m	struct:CheckMemoryData	file:
example_test_fprintf	src/example/calculator_test.c	/^int example_test_fprintf(FILE* const file, const char *format, ...) {$/;"	f
example_test_printf	src/example/calculator_test.c	/^int example_test_printf(const char *format, ...) {$/;"	f
exception_codes	src/cmockery.c	/^static const ExceptionCodeInfo exception_codes[] = {$/;"	v	file:
exception_filter	src/cmockery.c	/^static LONG WINAPI exception_filter(EXCEPTION_POINTERS *exception_pointers) {$/;"	f	file:
exception_handler	src/cmockery.c	/^static void exception_handler(int sig) {$/;"	f	file:
exception_signals	src/cmockery.c	/^static const int exception_signals[] = {$/;"	v	file:
exit_test	src/cmockery.c	/^static void exit_test(const int quit_application) {$/;"	f	file:
expect_any	src/cmockery/cmockery.h	231;"	d
expect_any_count	src/cmockery/cmockery.h	233;"	d
expect_assert_failure	src/cmockery/cmockery.h	382;"	d
expect_check	src/cmockery/cmockery.h	141;"	d
expect_in_range	src/cmockery/cmockery.h	165;"	d
expect_in_range_count	src/cmockery/cmockery.h	167;"	d
expect_in_set	src/cmockery/cmockery.h	148;"	d
expect_in_set_count	src/cmockery/cmockery.h	150;"	d
expect_memory	src/cmockery/cmockery.h	215;"	d
expect_memory_count	src/cmockery/cmockery.h	217;"	d
expect_memory_setup	src/cmockery.c	/^static void expect_memory_setup($/;"	f	file:
expect_not_in_range	src/cmockery/cmockery.h	175;"	d
expect_not_in_range_count	src/cmockery/cmockery.h	177;"	d
expect_not_in_set	src/cmockery/cmockery.h	153;"	d
expect_not_in_set_count	src/cmockery/cmockery.h	155;"	d
expect_not_memory	src/cmockery/cmockery.h	220;"	d
expect_not_memory_count	src/cmockery/cmockery.h	222;"	d
expect_not_string	src/cmockery/cmockery.h	205;"	d
expect_not_string_count	src/cmockery/cmockery.h	207;"	d
expect_not_value	src/cmockery/cmockery.h	190;"	d
expect_not_value_count	src/cmockery/cmockery.h	192;"	d
expect_range	src/cmockery.c	/^static void expect_range($/;"	f	file:
expect_set	src/cmockery.c	/^static void expect_set($/;"	f	file:
expect_string	src/cmockery/cmockery.h	200;"	d
expect_string_count	src/cmockery/cmockery.h	202;"	d
expect_value	src/cmockery/cmockery.h	185;"	d
expect_value_count	src/cmockery/cmockery.h	187;"	d
fail	makerpm.sh	/^fail()$/;"	f
fail	src/cmockery/cmockery.h	320;"	d
fail_if_blocks_allocated	src/cmockery.c	/^static void fail_if_blocks_allocated(const ListNode * const check_point,$/;"	f	file:
fail_if_leftover_values	src/cmockery.c	/^static void fail_if_leftover_values(const char *test_name) {$/;"	f	file:
failed	src/cmockery.c	/^    int failed;$/;"	m	struct:__anon1	file:
failed_msg	src/cmockery.c	/^    char failed_msg[XUNIT_TESTCASE_MSG_SIZE];$/;"	m	struct:__anon1	file:
failures	src/cmockery.c	/^    int failures;$/;"	m	struct:__anon2	file:
file	src/cmockery/cmockery.h	/^    const char* file;$/;"	m	struct:SourceLocation
find_item_by_value	src/example/key_value.c	/^KeyValue* find_item_by_value(const char * const value) {$/;"	f
find_operator_function_by_string	src/example/calculator.c	/^BinaryOperator find_operator_function_by_string($/;"	f
fprintf	src/example/calculator.c	45;"	d	file:
fprintf	src/example/calculator.c	48;"	d	file:
free	src/cmockery.c	1444;"	d	file:
free	src/cmockery.c	1480;"	d	file:
free	src/cmockery/cmockery_override.h	62;"	d
free	src/cmockery/cmockery_override.h	77;"	d
free_allocated_blocks	src/cmockery.c	/^static void free_allocated_blocks(const ListNode * const check_point) {$/;"	f	file:
free_symbol_map_value	src/cmockery.c	/^static void free_symbol_map_value(const void *value,$/;"	f	file:
free_value	src/cmockery.c	/^static void free_value(const void *value, void *cleanup_value_data) {$/;"	f	file:
function	src/cmockery/cmockery.h	/^    UnitTestFunction function;$/;"	m	struct:UnitTest
function	src/example/calculator.c	/^    BinaryOperator function;$/;"	m	struct:OperatorFunction	file:
function	src/example/calculator_test.c	/^	BinaryOperator function;$/;"	m	struct:OperatorFunction	file:
function_type	src/cmockery/cmockery.h	/^    UnitTestFunctionType function_type;$/;"	m	struct:UnitTest
get_allocated_blocks_list	src/cmockery.c	/^static ListNode* get_allocated_blocks_list() {$/;"	f	file:
get_customer_id_by_name	src/example/customer_database.c	/^unsigned int get_customer_id_by_name($/;"	f
get_status_code_string	src/example/assert_macro.c	/^const char* get_status_code_string(const unsigned int status_code) {$/;"	f
get_status_code_string_test	src/example/assert_macro_test.c	/^void get_status_code_string_test(void **state) {$/;"	f
get_symbol_value	src/cmockery.c	/^static int get_symbol_value($/;"	f	file:
gittotar	makerpm.sh	/^gittotar()$/;"	f
global_allocated_blocks	src/cmockery.c	/^static ListNode global_allocated_blocks;$/;"	v	file:
global_current_testcase	src/cmockery.c	/^static XunitTestCase *global_current_testcase = NULL;$/;"	v	file:
global_expect_assert_env	src/cmockery.c	/^jmp_buf global_expect_assert_env;$/;"	v
global_expecting_assert	src/cmockery.c	/^volatile int global_expecting_assert = 0;$/;"	v
global_function_parameter_map_head	src/cmockery.c	/^static ListNode global_function_parameter_map_head;$/;"	v	file:
global_function_result_map_head	src/cmockery.c	/^static ListNode global_function_result_map_head;$/;"	v	file:
global_last_failed_assert	src/cmockery.c	/^const char *global_last_failed_assert = NULL;$/;"	v
global_last_mock_value_location	src/cmockery.c	/^static SourceLocation global_last_mock_value_location;$/;"	v	file:
global_last_parameter_location	src/cmockery.c	/^static SourceLocation global_last_parameter_location;$/;"	v	file:
global_run_test_env	src/cmockery.c	/^static jmp_buf global_run_test_env;$/;"	v	file:
global_running_test	src/cmockery.c	/^static int global_running_test = 0;$/;"	v	file:
increment_value	src/example/assert_module.c	/^void increment_value(int * const value) {$/;"	f
increment_value_assert	src/example/assert_module_test.c	/^void increment_value_assert(void **state) {$/;"	f
increment_value_fail	src/example/assert_module_test.c	/^void increment_value_fail(void **state) {$/;"	f
initialize_source_location	src/cmockery.c	/^static void initialize_source_location(SourceLocation * const location) {$/;"	f	file:
initialize_testing	src/cmockery.c	/^void initialize_testing(const char *test_name) {$/;"	f
integer_in_range_display_error	src/cmockery.c	/^static int integer_in_range_display_error($/;"	f	file:
integer_not_in_range_display_error	src/cmockery.c	/^static int integer_not_in_range_display_error($/;"	f	file:
key	src/example/key_value.h	/^    unsigned int key;$/;"	m	struct:KeyValue
key_value_compare_keys	src/example/key_value.c	/^static int key_value_compare_keys(const void *a, const void *b) {$/;"	f	file:
key_values	src/example/key_value.c	/^static KeyValue *key_values = NULL;$/;"	v	file:
key_values	src/example/key_value_test.c	/^static KeyValue key_values[] = {$/;"	v	file:
leak_memory	src/example/allocate_module.c	/^void leak_memory(void) {$/;"	f
leak_memory_test	src/example/allocate_module_test.c	/^static void leak_memory_test(void **state) {$/;"	f	file:
line	src/cmockery/cmockery.h	/^    int line;$/;"	m	struct:SourceLocation
list_add	src/cmockery.c	/^static ListNode* list_add(ListNode * const head, ListNode *new_node) {$/;"	f	file:
list_add_value	src/cmockery.c	/^static ListNode* list_add_value(ListNode * const head, const void *value,$/;"	f	file:
list_empty	src/cmockery.c	/^static int list_empty(const ListNode * const head) {$/;"	f	file:
list_find	src/cmockery.c	/^static int list_find(ListNode * const head, const void *value,$/;"	f	file:
list_first	src/cmockery.c	/^static int list_first(ListNode * const head, ListNode **output) {$/;"	f	file:
list_free	src/cmockery.c	/^static ListNode* list_free($/;"	f	file:
list_indent	doc/html2wiki.sh	/^function list_indent(indent) {$/;"	f
list_initialize	src/cmockery.c	/^static ListNode* list_initialize(ListNode * const node) {$/;"	f	file:
list_remove	src/cmockery.c	/^static ListNode* list_remove($/;"	f	file:
list_remove_free	src/cmockery.c	/^static void list_remove_free($/;"	f	file:
location	src/cmockery.c	/^    SourceLocation location;  \/\/ Where the block was allocated.$/;"	m	struct:MallocBlockInfo	file:
location	src/cmockery.c	/^    SourceLocation location;$/;"	m	struct:SymbolValue	file:
location	src/cmockery/cmockery.h	/^    SourceLocation location;$/;"	m	struct:CheckParameterEvent
main	src/example/allocate_module_test.c	/^int main(int argc, char* argv[]) {$/;"	f
main	src/example/assert_macro_test.c	/^int main(int argc, char *argv[]) {$/;"	f
main	src/example/assert_module_test.c	/^int main(int argc, char *argv[]) {$/;"	f
main	src/example/calculator.c	/^int main(int argc, char *argv[]) {$/;"	f
main	src/example/calculator.c	53;"	d	file:
main	src/example/calculator_test.c	/^int main(int argc, char* argv[]) {$/;"	f
main	src/example/customer_database_test.c	/^int main(void) {$/;"	f
main	src/example/key_value_test.c	/^int main(void) {$/;"	f
main	src/example/mem_test.c	/^int main(void) {$/;"	f
main	src/example/product_database_test.c	/^int main(void) {$/;"	f
main	src/example/realloc_test.c	/^int main(void) {$/;"	f
main	src/example/run_tests.c	/^int main(void) {$/;"	f
major	packages/deb/rules	/^major=`ls src\/.libs\/lib*.so.* | \\$/;"	m
malloc	src/cmockery.c	1401;"	d	file:
malloc	src/cmockery.c	1430;"	d	file:
malloc	src/cmockery/cmockery_override.h	54;"	d
malloc	src/cmockery/cmockery_override.h	74;"	d
max	src/example/mem_test.c	/^    uintmax_t max;$/;"	m	struct:__anon3	file:
maximum	src/cmockery.c	/^    uintmax_t maximum;$/;"	m	struct:CheckIntegerRange	file:
memory	src/cmockery.c	/^    const void *memory;$/;"	m	struct:CheckMemoryData	file:
memory_equal_display_error	src/cmockery.c	/^static int memory_equal_display_error(const char* const a, const char* const b,$/;"	f	file:
memory_not_equal_display_error	src/cmockery.c	/^static int memory_not_equal_display_error($/;"	f	file:
minimum	src/cmockery.c	/^    uintmax_t minimum;$/;"	m	struct:CheckIntegerRange	file:
mock	src/cmockery/cmockery.h	120;"	d
mock_assert	src/cmockery.c	/^void mock_assert(const int result, const char* const expression,$/;"	f
mock_query_database	src/example/customer_database_test.c	/^static unsigned int mock_query_database($/;"	f	file:
multiply	src/example/calculator.c	/^static int multiply(int a, int b) {$/;"	f	file:
name	src/cmockery.c	/^    const char *name;$/;"	m	struct:__anon1	file:
name	src/cmockery.c	/^    const char *name;$/;"	m	struct:__anon2	file:
name	src/cmockery/cmockery.h	/^    const char* name;$/;"	m	struct:UnitTest
next	src/cmockery.c	/^    struct ListNode *next;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode	file:
node	src/cmockery.c	/^    ListNode node;            \/\/ Node within list of all allocated blocks.$/;"	m	struct:MallocBlockInfo	file:
null_test_success	src/example/run_tests.c	/^static void null_test_success(void **state) {$/;"	f	file:
num_of_testcases	src/cmockery.c	/^    int num_of_testcases;$/;"	m	struct:__anon2	file:
number_of_key_values	src/example/key_value.c	/^static unsigned int number_of_key_values = 0;$/;"	v	file:
operator	src/example/calculator.c	/^    const char* operator;$/;"	m	struct:OperatorFunction	file:
operator	src/example/calculator_test.c	/^	const char* operator;$/;"	m	struct:OperatorFunction	file:
operator_function_map	src/example/calculator.c	/^static OperatorFunction operator_function_map[] = {$/;"	v	file:
parameter_name	src/cmockery/cmockery.h	/^    const char *parameter_name;$/;"	m	struct:CheckParameterEvent
perform_operation	src/example/calculator.c	/^int perform_operation($/;"	f
pointer	src/cmockery.c	/^    void *pointer;$/;"	m	union:ValuePointer	file:
port	src/example/database.h	/^    unsigned int port;$/;"	m	struct:DatabaseConnection
prep	makerpm.sh	/^prep()$/;"	f
prev	src/cmockery.c	/^    struct ListNode *prev;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode	file:
previous_exception_filter	src/cmockery.c	/^static LPTOP_LEVEL_EXCEPTION_FILTER previous_exception_filter;$/;"	v	file:
print_error	src/cmockery.c	/^void print_error(const char* const format, ...) {$/;"	f
print_message	src/cmockery.c	/^void print_message(const char* const format, ...) {$/;"	f
printf	src/example/calculator.c	37;"	d	file:
printf	src/example/calculator.c	40;"	d	file:
query_database	src/example/database.h	/^    QueryDatabase query_database;$/;"	m	struct:DatabaseConnection
realloc	src/cmockery/cmockery_override.h	76;"	d
realloc_tests	src/example/realloc_test.c	/^static void realloc_tests(void **state) {$/;"	f	file:
refcount	src/cmockery.c	/^    int refcount;$/;"	m	struct:ListNode	file:
remove_always_return_values	src/cmockery.c	/^static void remove_always_return_values(ListNode * const map_head,$/;"	f	file:
report_create	src/cmockery.c	/^report_create( const XunitTestSuite *testsuite )$/;"	f
report_create_error	src/cmockery.c	/^report_create_error( const XunitTestSuite *testsuite )$/;"	f
report_destroy	src/cmockery.c	/^report_destroy( XunitTestSuite *testsuite )$/;"	f
report_init	src/cmockery.c	/^report_init( XunitTestSuite *testsuite,$/;"	f
run_tests	src/cmockery/cmockery.h	356;"	d
set	src/cmockery.c	/^    const uintmax_t *set;$/;"	m	struct:CheckIntegerSet	file:
set_key_values	src/example/key_value.c	/^void set_key_values(KeyValue * const new_key_values,$/;"	f
set_source_location	src/cmockery.c	/^static void set_source_location($/;"	f	file:
size	src/cmockery.c	/^    size_t size;              \/\/ Request block size.$/;"	m	struct:MallocBlockInfo	file:
size	src/cmockery.c	/^    size_t size;$/;"	m	struct:CheckMemoryData	file:
size_of_set	src/cmockery.c	/^    size_t size_of_set;$/;"	m	struct:CheckIntegerSet	file:
skip	src/cmockery.c	/^    int skip;$/;"	m	struct:__anon2	file:
snprintf	src/example/customer_database.c	21;"	d	file:
sort_items_by_key	src/example/key_value.c	/^void sort_items_by_key(void) {$/;"	f
source_location_is_set	src/cmockery.c	/^static int source_location_is_set(const SourceLocation * const location) {$/;"	f	file:
state	src/cmockery.c	/^    void *state;                 \/\/ State associated with the test.$/;"	m	struct:TestState	file:
static	src/example/calculator.c	57;"	d	file:
status_code_strings	src/example/assert_macro.c	/^static const char* status_code_strings[] = {$/;"	v	file:
string_equal_display_error	src/cmockery.c	/^static int string_equal_display_error($/;"	f	file:
string_not_equal_display_error	src/cmockery.c	/^static int string_not_equal_display_error($/;"	f	file:
string_to_status_code	src/example/assert_macro.c	/^unsigned int string_to_status_code(const char* const status_code_string) {$/;"	f
string_to_status_code_test	src/example/assert_macro_test.c	/^void string_to_status_code_test(void **state) {$/;"	f
subtract	src/example/calculator.c	/^static int subtract(int a, int b) {$/;"	f	file:
symbol_name	src/cmockery.c	/^    const char *symbol_name;$/;"	m	struct:SymbolMapValue	file:
symbol_names_match	src/cmockery.c	/^static int symbol_names_match(const void *map_value, const void *symbol) {$/;"	f	file:
symbol_values_list_head	src/cmockery.c	/^    ListNode symbol_values_list_head;$/;"	m	struct:SymbolMapValue	file:
system_out_msg	src/cmockery.c	/^    char system_out_msg[XUNIT_TESTCASE_MSG_SIZE];$/;"	m	struct:__anon1	file:
teardown_testing	src/cmockery.c	/^void teardown_testing(const char *test_name) {$/;"	f
temporary_buffer	src/example/calculator_test.c	/^char temporary_buffer[256];$/;"	v
test_add	src/example/calculator_test.c	/^static void test_add(void **state) {$/;"	f	file:
test_calloc	src/cmockery/cmockery.h	362;"	d
test_calloc	src/cmockery/cmockery_override.h	71;"	d
test_connect_to_customer_database	src/example/customer_database_test.c	/^static void test_connect_to_customer_database(void **state) {$/;"	f	file:
test_connect_to_product_database	src/example/product_database_test.c	/^static void test_connect_to_product_database(void **state) {$/;"	f	file:
test_connect_to_product_database_bad_url	src/example/product_database_test.c	/^static void test_connect_to_product_database_bad_url(void **state) {$/;"	f	file:
test_connect_to_product_database_missing_parameter	src/example/product_database_test.c	/^static void test_connect_to_product_database_missing_parameter(void **state) {$/;"	f	file:
test_divide	src/example/calculator_test.c	/^static void test_divide(void **state) {$/;"	f	file:
test_divide_by_zero	src/example/calculator_test.c	/^static void test_divide_by_zero(void **state) {$/;"	f	file:
test_example_main	src/example/calculator_test.c	/^static void test_example_main(void **state) {$/;"	f	file:
test_example_main_no_args	src/example/calculator_test.c	/^static void test_example_main_no_args(void **state) {$/;"	f	file:
test_expect_memory	src/example/mem_test.c	/^static void test_expect_memory(void **state) {$/;"	f	file:
test_expect_memory_check	src/example/mem_test.c	/^test_expect_memory_check( void *some_pointer )$/;"	f	file:
test_expect_memory_fail	src/example/mem_test.c	/^static void test_expect_memory_fail(void **state) {$/;"	f	file:
test_expect_not_memory	src/example/mem_test.c	/^static void test_expect_not_memory(void **state) {$/;"	f	file:
test_expect_not_memory_fail	src/example/mem_test.c	/^static void test_expect_not_memory_fail(void **state) {$/;"	f	file:
test_fail_connect_to_customer_database	src/example/customer_database_test.c	/^static void test_fail_connect_to_customer_database(void **state) {$/;"	f	file:
test_find_item_by_value	src/example/key_value_test.c	/^static void test_find_item_by_value(void **state) {$/;"	f	file:
test_find_operator_function_by_string_found	src/example/calculator_test.c	/^static void test_find_operator_function_by_string_found(void **state) {$/;"	f	file:
test_find_operator_function_by_string_not_found	src/example/calculator_test.c	/^static void test_find_operator_function_by_string_not_found(void **state) {$/;"	f	file:
test_find_operator_function_by_string_null_functions	src/example/calculator_test.c	/^static void test_find_operator_function_by_string_null_functions(void **state) {$/;"	f	file:
test_find_operator_function_by_string_null_string	src/example/calculator_test.c	/^static void test_find_operator_function_by_string_null_string(void **state) {$/;"	f	file:
test_find_operator_function_by_string_valid_null_functions	src/example/calculator_test.c	/^static void test_find_operator_function_by_string_valid_null_functions(void **state) {$/;"	f	file:
test_free	src/cmockery/cmockery.h	363;"	d
test_free	src/cmockery/cmockery_override.h	73;"	d
test_get_customer_id_by_name	src/example/customer_database_test.c	/^static void test_get_customer_id_by_name(void **state) {$/;"	f	file:
test_malloc	src/cmockery/cmockery.h	361;"	d
test_malloc	src/cmockery/cmockery_override.h	70;"	d
test_multiply	src/example/calculator_test.c	/^static void test_multiply(void **state) {$/;"	f	file:
test_perform_operation	src/example/calculator_test.c	/^static void test_perform_operation(void **state) {$/;"	f	file:
test_perform_operation_first_arg_not_integer	src/example/calculator_test.c	/^static void test_perform_operation_first_arg_not_integer(void **state) {$/;"	f	file:
test_perform_operation_missing_argument	src/example/calculator_test.c	/^static void test_perform_operation_missing_argument(void **state) {$/;"	f	file:
test_perform_operation_no_arguments	src/example/calculator_test.c	/^void test_perform_operation_no_arguments(void **state) {$/;"	f
test_perform_operation_no_integer_after_operator	src/example/calculator_test.c	/^static void test_perform_operation_no_integer_after_operator(void **state) {$/;"	f	file:
test_perform_operation_null_args	src/example/calculator_test.c	/^static void test_perform_operation_null_args(void **state) {$/;"	f	file:
test_perform_operation_null_intermediate_values	src/example/calculator_test.c	/^static void test_perform_operation_null_intermediate_values(void **state) {$/;"	f	file:
test_perform_operation_null_number_of_intermediate_values	src/example/calculator_test.c	/^static void test_perform_operation_null_number_of_intermediate_values(void **state) {$/;"	f	file:
test_perform_operation_null_operator_functions	src/example/calculator_test.c	/^static void test_perform_operation_null_operator_functions(void **state) {$/;"	f	file:
test_perform_operation_unknown_operator	src/example/calculator_test.c	/^static void test_perform_operation_unknown_operator(void **state) {$/;"	f	file:
test_realloc	src/cmockery/cmockery_override.h	72;"	d
test_sort_items_by_key	src/example/key_value_test.c	/^static void test_sort_items_by_key(void **state) {$/;"	f	file:
test_struct_expect_memory	src/example/mem_test.c	/^static void test_struct_expect_memory(void **state) {$/;"	f	file:
test_struct_expect_memory_check	src/example/mem_test.c	/^test_struct_expect_memory_check( test_struct_t *some_struct )$/;"	f	file:
test_struct_t	src/example/mem_test.c	/^} test_struct_t;$/;"	t	typeref:struct:__anon3	file:
test_subtract	src/example/calculator_test.c	/^static void test_subtract(void **state) {$/;"	f	file:
testcases	src/cmockery.c	/^    XunitTestCase *testcases;$/;"	m	struct:__anon2	file:
tests	src/cmockery.c	/^    int tests;$/;"	m	struct:__anon2	file:
time_in_msecs	src/cmockery.c	/^    double time_in_msecs;$/;"	m	struct:__anon1	file:
time_in_msecs	src/cmockery.c	/^    double time_in_msecs;$/;"	m	struct:__anon2	file:
uintptr_t	src/cmockery/cmockery.h	/^typedef unsigned long uintptr_t;$/;"	t
unit_test	src/cmockery/cmockery.h	323;"	d
unit_test_expect_failure	src/cmockery/cmockery.h	330;"	d
unit_test_setup	src/cmockery/cmockery.h	324;"	d
unit_test_setup_teardown	src/cmockery/cmockery.h	336;"	d
unit_test_teardown	src/cmockery/cmockery.h	326;"	d
url	src/example/database.h	/^    const char *url;$/;"	m	struct:DatabaseConnection
v	src/example/mem_test.c	/^    void *v;$/;"	m	struct:__anon3	file:
value	src/cmockery.c	/^    const void *value;$/;"	m	struct:ListNode	file:
value	src/cmockery.c	/^    uintmax_t value;$/;"	m	struct:SymbolValue	file:
value	src/cmockery.c	/^    uintmax_t value;$/;"	m	union:ValuePointer	file:
value	src/example/key_value.h	/^    const char* value;$/;"	m	struct:KeyValue
value_in_set_display_error	src/cmockery.c	/^static int value_in_set_display_error($/;"	f	file:
values_equal_display_error	src/cmockery.c	/^static int values_equal_display_error(const uintmax_t left,$/;"	f	file:
values_not_equal_display_error	src/cmockery.c	/^static int values_not_equal_display_error(const uintmax_t left,$/;"	f	file:
version	packages/deb/rules	/^version=`ls src\/.libs\/lib*.so.* | \\$/;"	m
vprint_error	src/cmockery.c	/^void vprint_error(const char* const format, va_list args) {$/;"	f
vprint_message	src/cmockery.c	/^void vprint_message(const char* const format, va_list args) {$/;"	f
vsnprintf	src/cmockery.c	39;"	d	file:
vsnprintf	src/example/calculator_test.c	25;"	d	file:
will_always_return	src/cmockery/cmockery.h	129;"	d
will_return	src/cmockery/cmockery.h	126;"	d
will_return_count	src/cmockery/cmockery.h	132;"	d
xmlfile	src/cmockery.c	/^    char xmlfile[XUNIT_TESTCASE_MSG_SIZE];$/;"	m	struct:__anon2	file:
